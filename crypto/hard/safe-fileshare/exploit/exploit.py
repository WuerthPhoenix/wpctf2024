import requests
import re
import time
from safe_fileshare.ec import secp192k1

SIG_RE = re.compile('^/files/(.*)\\?')
KEY_RE = re.compile('\\?key=(.*)$')

FLAG_FILE = b'intruder/flag.txt'

def reverse(z1, z2, s1, s2, r, n):
    num = (z2 - z1) % n
    den = (s2 - s1) % n
    den_inv = pow(den, -1, n)
    k = (num * den_inv) % n
    r_inv = pow(r, -1, n)
    dA = ((s1 * k - z1) * r_inv) % n
    return k, dA


def get_request_data(i: int):
    filename = f'notes{i}.md'
    files = {"file": (filename, open('../description.txt', 'r'))}
    resp = session.post('http://localhost:5000/upload', files=files)
    response_json = resp.json()
    url = response_json['download_urls'][0]
    sig = SIG_RE.findall(url)[0]
    key = KEY_RE.findall(url)[0]
    return (filename, sig, key)


session = requests.session()
credentials = {'username': 'pippo', 'password': 'pippo'}
requests.post('http://localhost:5000/auth/register.html', data=credentials)
resp = session.post('http://localhost:5000/auth/login.html', data=credentials)
assert resp.status_code == 200

# Detect the period of repeating keys. 
start = time.time()
known_requests={}
for i in range(10000):
    print(f'\rCounting requests: {i}', end='', flush=True)

    filename, sig, key = get_request_data(i)
    if key in known_requests.keys():
        break

    known_requests[key] = {
        'z1': f"pippo/{filename}",
        's1': sig,
        'r': key
    }

duration = time.time() - start
print(f" in {int(duration)} seconds")


# Get a second sample for each key
start = time.time()
for i in range(0, len(known_requests)):
    print(f'\rGetting second sample: {i}', end='', flush=True)
    i = len(known_requests) + i + 1
    filename, sig, key = get_request_data(i)
    known_req = known_requests[key]
    known_req['z2'] = f"pippo/{filename}"
    known_req['s2'] = sig

duration = time.time() - start
print(f" in {int(duration)} seconds")

# Calculate the random number and private key
start = time.time()
i = 0
for key in known_requests.keys():
    print(f'\rReversing random number and key: {i}', end='', flush=True)
    i += 1

    req = known_requests[key]
    z1 = secp192k1.hash_bits(bytes(req['z1'], 'utf8'))
    z2 = secp192k1.hash_bits(bytes(req['z2'], 'utf8'))
    s1 = int(req['s1'], 16)
    s2 = int(req['s2'], 16)
    r = int(req['r'], 16)
    k, dA = reverse(z1, z2, s1, s2, r, secp192k1.n)
    req['rn'] = k
    req['key'] = dA

duration = time.time() - start
print(f" in {int(duration)} seconds")


# Try all random numbers with the private key to sign the filename
z = secp192k1.hash_bits(FLAG_FILE)
i = 0
for key in known_requests.values():
    print(f'\rTrying out random number and key: {i}', end='', flush=True)
    i += 1

    r, s = secp192k1.sign(z, key['rn'], key['key'])
    assert f'{r:x}' == key['r']

    url = f'http://localhost:5000/files/{s:x}?key={r:x}'
    req = session.get(url)
    if req.status_code == 200:
        print()
        print(f'Flag: {req.text}')
        break